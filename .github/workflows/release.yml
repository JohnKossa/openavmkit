name: Publish to (Test)PyPI on tag

on:
  push:
    tags:
      - 'v*'   # fire on tag pushes like v0.3.1rc3, v0.3.1
  create:      # also fire when a tag is created
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build/publish (e.g., v0.3.1rc4)'
        required: true

permissions:
  contents: read

jobs:
  build:
    # Run only for tags named v* across push/create/dispatch
    if: >
      (github.event_name == 'push'   && startsWith(github.ref, 'refs/tags/v')) ||
      (github.event_name == 'create' && github.ref_type == 'tag' && startsWith(github.ref, 'v')) ||
      (github.event_name == 'workflow_dispatch' && startsWith(inputs.tag, 'v'))
    name: Build sdist & wheel
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          # On manual dispatch, check out the requested tag; otherwise use the event ref
          ref: ${{ github.event_name == 'workflow_dispatch' && inputs.tag || github.ref }}

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build tooling
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine pkginfo

      - name: Clean previous artifacts
        run: rm -rf dist

      - name: Build
        run: python -m build

      - name: Verify metadata
        run: twine check dist/*

      - name: Ensure tag matches package version (guardrail)
        run: |
          # Figure out the tag name for all trigger types
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG_RAW="${{ inputs.tag }}"
          elif [ -n "${GITHUB_REF_NAME}" ]; then
            TAG_RAW="${GITHUB_REF_NAME}"
          else
            TAG_RAW="${GITHUB_REF##refs/tags/}"
          fi
          TAG="${TAG_RAW#v}"   # strip leading 'v'
          echo "TAG=${TAG}"

          python - <<'PY'
import glob, pkginfo, sys
wheels = sorted(glob.glob("dist/*.whl"))
if not wheels:
    sys.exit("No wheel found in dist/")
meta = pkginfo.Wheel(wheels[0])
print(meta.version)
PY
          PKG_VER=$(python - <<'PY'
import glob, pkginfo
wheels = sorted(glob.glob("dist/*.whl"))
print(pkginfo.Wheel(wheels[0]).version)
PY
)
          echo "PKG_VER=${PKG_VER}"
          if [[ "${PKG_VER}" != "${TAG}" && "${PKG_VER}" != ${TAG}* ]]; then
            echo "Tag (v${TAG}) does not match package version (${PKG_VER})"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*

  publish:
    # Same gating as build
    if: >
      (github.event_name == 'push'   && startsWith(github.ref, 'refs/tags/v')) ||
      (github.event_name == 'create' && github.ref_type == 'tag' && startsWith(github.ref, 'v')) ||
      (github.event_name == 'workflow_dispatch' && startsWith(inputs.tag, 'v'))
    name: Publish to (Test)PyPI
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write   # required for PyPI Trusted Publishing (OIDC)
      contents: read
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Choose index based on tag (rc/a/b -> TestPyPI)
        id: idx
        run: |
          # Determine the tag name across all trigger types
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ inputs.tag }}"
          elif [ -n "${GITHUB_REF_NAME}" ]; then
            TAG="${GITHUB_REF_NAME}"
          else
            TAG="${GITHUB_REF##refs/tags/}"
          fi

          if [[ "$TAG" =~ (a|b|rc) ]]; then
            echo "repo_url=https://test.pypi.org/legacy/" >> $GITHUB_OUTPUT
          else
            echo "repo_url=" >> $GITHUB_OUTPUT
          fi

      - name: Publish
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages: dist/*
          repository-url: ${{ steps.idx.outputs.repo_url }}
