name: Publish to (Test)PyPI on tag

on:
  push:
    tags:
      - 'v*'  # any tag that starts with v

permissions:
  contents: read

jobs:
  build:
    name: Build sdist & wheel
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build tooling
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine pkginfo

      - name: Clean previous artifacts
        run: rm -rf dist

      - name: Build
        run: python -m build

      - name: Verify metadata
        run: twine check dist/*

      - name: Ensure tag matches package version (guardrail)
        run: |
          TAG="${GITHUB_REF_NAME#v}"   # strip leading 'v'
          echo "TAG=${TAG}"
          python - <<'PY'
import glob, pkginfo
wheels = sorted(glob.glob("dist/*.whl"))
if not wheels:
    raise SystemExit("No wheel found in dist/")
meta = pkginfo.Wheel(wheels[0])
print(meta.version)
PY
          PKG_VER=$(python - <<'PY'
import glob, pkginfo
wheels = sorted(glob.glob("dist/*.whl"))
print(pkginfo.Wheel(wheels[0]).version)
PY
)
          echo "PKG_VER=${PKG_VER}"
          if [[ "${PKG_VER}" != "${TAG}" && "${PKG_VER}" != ${TAG}* ]]; then
            echo "Tag (v${TAG}) does not match package version (${PKG_VER})"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*

  publish:
    name: Publish to (Test)PyPI
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write   # required for PyPI Trusted Publishing (OIDC)
      contents: read
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Choose index based on tag (rc/a/b -> TestPyPI)
        id: idx
        run: |
          TAG="${GITHUB_REF_NAME}"
          if [[ "$TAG" =~ (a|b|rc) ]]; then
            echo "repo_url=https://test.pypi.org/legacy/" >> $GITHUB_OUTPUT
          else
            echo "repo_url=" >> $GITHUB_OUTPUT
          fi

      - name: Publish
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages: dist/*
          repository-url: ${{ steps.idx.outputs.repo_url }}
